apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: 'com.novoda.static-analysis'

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/reports")
}

android {
    lintOptions {
        disable 'IconLocation', 'OldTargetApi', 'UnusedResources'
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
    doLast {
        println("Checking for checkstyle errors!")
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }

}

staticAnalysis {
    penalty {
        maxErrors = 0
        maxWarnings = 0
    }
    checkstyle {
        toolVersion("8.32")
        configFile rootProject.file('config/checkstyle/checkstyle.xml')
    }
    pmd { }
    findbugs {}
//    spotbugs { }
    lintOptions { }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.swt20.swt_morning2"
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testOptions.unitTests.includeAndroidResources = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-all
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testImplementation 'org.robolectric:robolectric:4.3'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'
}
